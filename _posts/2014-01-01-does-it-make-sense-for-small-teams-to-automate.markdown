---
layout: post
title: "Does It Make Sense For Smaller Teams To Automate?"
date: 2014-01-01 23:50
comments: true
tags:
    - leadership
---
<img src="/img/post/capistrano.png" width="383" height="95" class="right" />
Increasing the productivity of development teams has always been a crucial challenge for every technical manager. Agile methodologies such as [Scrum](http://en.wikipedia.org/wiki/Scrum_%28software_development%29) and [Kanban](http://en.wikipedia.org/wiki/Kanban_%28development%29) are rightfully a popular approach to achieve higher productivity and efficiency. However today I would like to reflect on improving internal development processes and their automation. When it comes to improve internal processes, many times I came across concerns raised by both managers and peers. Some claimed that other tasks especially feature requests were more important and urgent. Whereas others claimed that it did not make any sense for their small team. For me it appears that exactly both are reasons to go for automation.
<!-- more -->
Time is limited. Having only few or in the worst case one technical resource aggravates this. It is crucial to minimize non-productive and repeating internal tasks. With a larger team you may categorise these tasks into responsibility areas and assign them to dedicated staff such as release managers and system engineers. Yet with a smaller team you usually cannot do that. In any case, instead of doing the same thing over and over again, it is better to spend a little more time and do it in a way so it is automated and can be re-run. Spending less time on non-productive work with the help of automation leaves time for other, more important tasks.

<img src="/img/post/knowledge-conversion-process.jpg" width="486" height="292" class="right" />
A side effect of this is the codification of knowledge and expertise. To automate tasks it needs to be scripted thus written down. This reminds me of [Ikujiro Nonaka](http://en.wikipedia.org/wiki/Ikujiro_Nonaka)'s Four Modes of Knowledge Conversion in "[The Knowledge-Creating Company](http://www.amazon.co.uk/The-Knowledge-Creating-Company-Companies-Innovation/dp/0195092694)" (1991). Nonaka differentiates between tacit and explicit knowledge. Tacit knowledge is subjective as well as based on experience. It is not directly expressable in words. Explicit knowledge on the other hand is objective and codified (written down). The four modes of conversion describe the transfer of knowledge between both but also between those of the same type. Explicit to tacit knowledge transfer, which is called internalization by Nonaka, means that members of the organization learn the codified knowledge and use it by trial and error. Tacit to tacit knowledge transfer (socialization) imply learning processes between peers. A classical example of this type of knowledge conversion is apprenticeship which a fundamental pillar of education in some countries such as Germany. The conversion of explicit to explicit knowledge (combination) simply means combining knowledge from different sources together. However the most important and difficult one is the tacit to explicit knowledge transfer which means codifying subjective experience into objective and readily understandable knowledge. This is similar to socialization where peers learn from each other, however here we try to write things down objectively. So automation is in my opinion often an externalization thus tacit to explicit knowledge.

There are [plenty of tools](http://en.wikipedia.org/wiki/List_of_build_automation_software) to automate things. At [Broadmargins](http://www.broadmargins.com/) we use [Capistrano](http://www.capistranorb.com/) and [Rake](http://en.wikipedia.org/wiki/Rake_(software)). Capistrano is based on Rake and is a remote deployment tool with which we deploy our [Magento](http://www.magentocommerce.com/) projects. Pushing a new release is now limited to one command-line call which takes care of cloning and linking the code base as well as clearing caches, notify [NewRelic](http://newrelic.com/) and much more. Recently we started to use the [Ruby](https://www.ruby-lang.org/)-based Rake for any non-deployment automations such as updating the development database.
